// Central export point for all types

// Re-export base types
export * from "./base.types";

// Re-export specific domain types
export * from "./campaign.types";
export * from "./credentials.types";
export * from "./sync.types";

// Re-export database types (generated by Supabase)
export type {
  Database,
  Tables,
  TablesInsert,
  TablesUpdate,
  Enums,
  Json,
} from "./supabase.types";

// Import Database for type definitions
import type { Database, Json } from "./supabase.types";

// Re-export user and auth types
export * from "./auth.types";
export * from "./user";

// Re-export specific database types from supabase.types - with compatibility fixes
export type UserRole = Database["public"]["Enums"]["user_role"];
export type PlatformType = Database["public"]["Enums"]["platform_type"];
export type InvitationStatus = Database["public"]["Enums"]["invitation_status"];

// Table row types - keeping compatibility with existing code
export interface Profile {
  id: string;
  email: string | null;
  full_name?: string | null;
  avatar_url?: string | null;
  updated_at?: string | null;
  created_at?: string | null;
}

export interface Team {
  id: string;
  name: string;
  master_user_id: string;
  created_at: string;
  updated_at: string;
}

export interface TeamMember {
  id: string;
  team_id: string | null;
  user_id: string | null;
  role: UserRole;
  invited_by?: string | null;
  joined_at: string;
}

export interface TeamInvitation {
  id: string;
  team_id: string;
  email: string;
  role: Exclude<UserRole, "master">; // Only team_mate or viewer can be invited
  invited_by: string;
  status: InvitationStatus;
  token: string;
  expires_at: string;
  accepted_at?: string | null;
  created_at: string;
}

export type PlatformCredential =
  Database["public"]["Tables"]["platform_credentials"]["Row"];

export interface Campaign {
  id: string;
  team_id: string;
  platform: PlatformType;
  platform_campaign_id: string;
  platform_credential_id?: string | null;
  name: string;
  status?: string | null;
  budget?: number | null;
  is_active: boolean | null;
  raw_data?: Json | null;
  created_at: string;
  updated_at: string;
  synced_at?: string | null;
}

export interface CampaignMetric {
  id: string;
  campaign_id: string;
  date: string;
  impressions: number | null;
  clicks: number | null;
  conversions: number | null;
  cost: number | null;
  revenue: number | null;
  raw_data?: Json | null;
  created_at: string;
}

export interface CampaignWithMetrics extends Campaign {
  metrics: CampaignMetric[];
}

// Type utilities for compatibility during migration
export type CompatibleCampaign = Campaign & {
  teamId?: string;
  platformCampaignId?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
  metrics?: unknown;
};

export type CompatiblePlatformCredential = PlatformCredential & {
  isActive?: boolean;
  teamId?: string;
  lastSyncAt?: string;
};

// Extended types
export interface TeamMemberWithProfile extends TeamMember {
  profiles: Profile | null;
}

// RPC function return types
export interface AcceptTeamInvitationResult {
  success: boolean;
  error?: string;
  team_id?: string;
  role?: UserRole;
}

// Re-export dashboard types
export * from "./dashboard";

// Re-export google ads types (excluding conflicting types)
export type {
  GoogleAdsCredentials,
  GoogleAdsCredentials as GoogleAdsApiCredentials,
  GoogleAdsAccount,
  GoogleAdsCampaign,
  GoogleAdsMetrics,
  CampaignStatusUpdate,
  GoogleAdsLabel,
  CampaignLabelAssignment,
  SyncConfig,
  SyncError,
  GoogleAdsQuery,
  GoogleAdsApiResponse,
  GoogleAdsError,
  BatchOperation,
  ReportQuery,
  CampaignBudget,
  ChangeEvent,
  QueueJob,
  SchedulerConfig,
  // Rename SyncResult to avoid conflict
  SyncResult as GoogleAdsSyncResult,
} from "./google-ads.types";

// Re-export platform types
export * from "./platform";

// Type utilities for database <-> application layer conversion
export * from "./type-utils";
